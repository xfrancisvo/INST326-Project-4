class Product:
    # base class for products in the store
    def __init__(self, product_id, name, price, category):
        self.product_id = product_id
        self.name = name
        self._price = price  # keeps the price private to control changes
        self.category = category

    @property
    def price(self):
        return self._price

    def get_discount(self):
        return 0  # base products have no discount

class Electronics(Product):
    # subclass for electronics with potential discounts
    def get_discount(self):
        return 0.10 # electronics have a 10% discount

class ShoppingCart:
    # class to manage shopping cart operations
    def __init__(self):
        self.contents = {}  # stores product details with quantities

    def add_product(self, product, quantity=1):
        # checks if quantity is positive
        if quantity <= 0:
            print("Quantity must be positive")
            return
        # adds the product to the cart or updates the quantity if it already exists
        if product.product_id in self.contents:
            self.contents[product.product_id]['quantity'] += quantity
        else:
            self.contents[product.product_id] = {
                'product': product,
                'quantity': quantity
            }

    def remove_product(self, product_id, quantity=1):
        # checks if quantity is positive
        if quantity <= 0:
            print("Quantity must be positive")
            return
        # removes the product or decreases its quantity
        if product_id in self.contents:
            if self.contents[product_id]['quantity'] > quantity:
                self.contents[product_id]['quantity'] -= quantity
            else:
                del self.contents[product_id]

    def calculate_total(self):
        # calculates the total cost of the cart, including discounts
        total = 0
        for item in self.contents.values():
            product = item['product']
            quantity = item['quantity']
            discount = product.price * product.get_discount()  # uses the get_discount method
            total += (product.price - discount) * quantity
        return total
